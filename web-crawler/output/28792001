电脑/网络 编程语言 其他编程语言 
一道《C语言版数据结构》的题目！帮帮忙啊！
马问题，如何不重复地把格子走完，任意放置一个吗，就是64个国际象棋格子
<br /> }<br /> cout&lt, k;/ y &lt;<br />int weight[N][N]#include&lt;<br /> directions()!=0) /n&quot;<br /> for(x = 1;走到这一点<br />   a[st][0] = x; /确定按这次的方向走应走到的x; weight[x2][y2] )&#47,y2+1);//<br />   way = dir[x-1][y-1][way0];&lt;&lt;<br />int a[N*N+1][3] = { 0 }, -1;&#47, y1;<br /> c = getchar(); 8, way; j &lt;endl;= N && y &gt;<br />     x1 = i + way1[way_1], -1; 8 || j &lt;n&#39; i &lt; / j &lt;iostream;<br /> cout&lt;1||y&lt; <br />int check(int i;<br />     y2 = j + way2[way_2];在ch数组中对相应点赋值<br /> while(1) {<br />  if(a[1][2] &gt;<br />int dir[N][N][8];&lt,  1;&gt;对每个方向考察看有没有更好的<br />     way_1 = dir[i][j][k]; 1 || i &gt,j)是否在棋盘内<br /> if( i &lt;<br />     x2 = i + way1[way_2];出发点的八个方向都已走过; 8 )<br />  return 0;/步数已满<br />    print();/n&quot; k &lt;/= 8) { /<br />      dir[i][j][m] = way_1;++w&lt;<br />   a[st][2] = 0;<br />  if(a[st][2] &gt.h&gt;输出结果<br />    if(c == &#39;&lt;&lt; &#47，应走此方向<br />   way0 = a[st][2];;<br />   a[st][2]++;<br />#include&lt;询问是否继续输出结果<br />}<br /><br />void main() {<br /> int x;输入行数和列数<br /> getchar(),int j) { /<br /> return 1;此点的八个方向都已走过;/= 1 && y&lt;<br />    if ( x &gt;<br /> ch[(x-1)*N+y-1] = 1;&#47, y2;<br />     way_2 = dir[i][j][m],  2; 1 || j &gt;<br /><br />int w = 0; 8, way_1;/<br />    a[st][0] = a[st][1] = a[st][2] = 0, y = a[1][1];y&#39; <br /><br />void caculate() { / &#47, k; i++)<br />  for(j = 1; &#47, j; m++) { /<br />    y = j + way2[k];将这一点被走过的痕迹抹去<br />   a[st][0] = a[st][1] = a[st][2] = 0;<br />char c = &#39;= 1 && x &lt, -2，应该退回到上一次走的点<br />   x = a[st][0];求出各点的最佳方向序列;setw(3)&lt;a[1][1]; /nPress n to quit ;<br />     n1 = check(x1+1,  2;a[1][0]&gt, n1;使上一次走的点走的方向发生变化<br />   st--; N;<br />   y = a[st][1] + way2[way];k方向不可达到;stdio;<br /> cin&gt;&quot; k &lt;<br />     n2 = check(x2+1;&quot;<br />    ch[(x-1)*N+y-1] = 0;endl; / N + 1;)<br />     break; /确定下次应走的方向<br />   x = a[st][0]; N;检查(i;<br /> caculate();answer---------&#92;/1||x&gt，而m方向可达到<br />                        ( n1 && n2 && weight[x1][y1] &gt; /&lt, -2;交换两个方向值<br />     }<br />    }<br />   }<br />  }<br />}<br /><br />void print() {<br /> int x;, way0; N + 1; k++) {<br />    for(m = k + 1;=N )<br />     weight[i-1][j-1]++;计算各点的权值<br /> int i;<br /> for(i = 1; i++)<br />  for(j = 0;<br />   y = a[st][1];<br />     y1 = j + way2[way_1],y1+1);此点的八个方向未全走过;&#47, 1; <br /><br />void caculate(),y坐标<br />   if(x&lt, way_2.&#92;<br />   a[st][1] = y, j;<br />  for(y = 1, -1};<br />    st--;<br />   }<br />}<br /><br />int check(int i.h&gt;都可达到但m方向权值小<br />       ) {<br />      dir[i][j][k] = way_2; y++)<br />   cout&lt;;&lt; x++) {<br />  cout&lt;<br />   y = a[st][1]; x &lt;/&#47, y; <br />} <br /><br />void directions() { &#47, n2; / &#47,press any other key to continue; m &lt;&quot;<br />int way2[8] = { 1;<br />     if( ( n1==0 && n2 ) || // j++) {<br />   for(k = 0;&lt;= 8) /<br /><br />const int N = 8;/步数减一<br />  }<br />  else { / /N||ch[(x-1)*N+y-1];标记这一步<br />   if(st == N*N) { /Please enter the row and column of the starting point;&#92;<br />int way1[8] = {-2，表示所有的方法均已找出<br />   break; N;= N; k &lt, -2};&lt, x2;/<br />   x = a[st][0] + way1[way];<br /> for(i = 0, y;;&#47, 2;<br />    a[st-1][2]++, -1, 2; /&quot;n---------&quot;&#47.&#92;<br /> cout&lt;N||y&gt;= N;ch[(x-1)*N+y-1], int j), 1;&lt;&#47, m;<br />int ch[N*N] = { 0 };<br />  cout&lt;<br />   for(k = 0.h&gt;/<br />   a[st-1][2]++，即优先向权值小的方向<br /> int i; j++)<br />   for(k = 0; <br />void dirctions();/iomanip, x1;<br />   ch[(x-1)*N+y-1] = 0; <br />void print();<br />    x = i + way1[k];&#92;/<br />#include&lt;<br />   ch[(x-1)*N+y-1] = ++st;接收回车符<br /> x = a[1][0]; 8; k++) {<br />    int x;n&quot;&#47, y;此点不满足要求<br />    continue;&gt; <br />int st = 1; // k++)<br />    dir[i][j][k] = k; i &lt
1
none
http://zhidao.baidu.com/question/936391947469442652.html?qbl=relate_question_0
http://zhidao.baidu.com/question/163870228.html?qbl=relate_question_1
http://zhidao.baidu.com/question/243173398.html?qbl=relate_question_2
http://zhidao.baidu.com/question/127305614.html?qbl=relate_question_3
http://zhidao.baidu.com/question/124266761.html?qbl=relate_question_4
