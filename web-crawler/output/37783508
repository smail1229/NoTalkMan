电脑/网络 编程语言 C/C++ 
C语言中break和continue在各种循环中的用法,谢谢...
none
都一样，<br />break是跳出循环<br />continue是不执行循环内continue语句以下的代码，直接跳到下一次循环
9
　　C语言中continue与break的用法介绍<br />　　1. continue<br />continue 可用于 C 提供的全部三种循环结构。continue 会致使循环跳过循环体中余下的语句，转而判断循环条件是否仍然成立，然后选择是否再次进入循环体。如果 continue 位于循环嵌套中的一个内循环，则其仅能影响该内循环的执行情况，而不会对外循环造成任何影响。例如：<br />&#47;*--------------------------------------------------------------<br />| 功能： 统计从 1 到 N 中一共有多少个数字可以被 5 整除<br />-------------------------------------------------------------*&#47;<br />#include &lt;stdio.h&gt;<br />int main(void)<br />{<br />int i, j, total;<br />&#47;* 本程序仅用于演示 continue 的作用，实际上没有人用这么笨的方法进行统计 *&#47;<br />do<br />{<br />printf(&quot;Please enter an integer: &quot;);<br />scanf(&quot;%d&quot;, &i);<br />if ( i == 0 )<br />{<br />printf(&quot;Zero is not allow. &quot;);<br />continue;<br />}<br />for ( j = 1, total = 0; j &lt;= i; ++j )<br />{<br />if ( j % 5 )<br />{ &#47;* j 不能被 5 整除 *&#47;<br />continue;<br />}<br />++total; &#47;* 统计从 1 到 i 一共有多少个数字可以被 5 整除 *&#47;<br />}<br />printf(&quot;Total: %d &quot;, total);<br />} while ( i ) ; &#47;* i 等于 0 时退出循环 *&#47;<br />}<br />我们先来分析一下内循环。假设用户输入的是 5，则内循环的前四次循环中，j % 5 都为真，然后执行 continue; 跳过循环体中余下的语句，直接执行 ++j，继而判断 j &lt;= i 的真假性，从而选择是否再次进入循环体。本内循环中，因为 continue 的关系，前四次循环 ++total; 都会被跳过。第五次循环 j % 5 为假，不会执行 continue; ，++total; 终于得以被执行。<br />外循环中，假设用户输入 0，则 i == 0 为真，continue; 得以被执行，因此跳到 while ( i )，因为 i 为假，故外循环结束。如下图所示：<br />　　请注意，本例中的内循环完全是出于演示目的才用 continue 的，这使代码复杂化了，有违 continue 的初衷。continue 是为了简化代码而生的！本例中的内循环如果不使用 continue，代码将会更简单：<br />for ( j = 1, total = 0; j &lt;= i; ++j )<br />{<br />if ( j % 5 == 0 )<br />{<br />++total; &#47;* 统计从 1 到 i 一共有多少个数字可以被 5 整除 *&#47;<br />} <br />}<br />记住，continue 是为了简化代码而生的！使用前请斟酌使用它是否能简化代码，如果不能，则不要用。<br />其实本例中的外循环也可以不用 continue。以下代码没有使用 continue，但其功能和上面使用 continue 的那段代码完全一样。<br />do<br />{<br />printf(&quot;Please enter an integer: &quot;);<br />scanf(&quot;%d&quot;, &i);<br />if ( i == 0 )<br />{<br />printf(&quot;Zero is not allow. &quot;);<br />}<br />else<br />{<br />for ( j = 1, total = 0; j &lt;= i; ++j )<br />{<br />if ( j % 5 == 0 )<br />{<br />++total; &#47;* 统计从 1 到 i 一共有多少个数字可以被 5 整除 *&#47;<br />} <br />}<br />printf(&quot;Total: %d &quot;, total);<br />}<br />} while ( i ) ; &#47;* i 等于 0 时退出循环 *&#47;<br />不过，本例中的外循环使用 continue 使得代码的结构更加清晰明了，紧凑易读，而且也没有使代码复杂化。本例中的外循环使用 continue 告诉我们，当 i 等于 0 时跳到 while ( i )。如果不用 continue 而采用上面这段代码的话，当 i 等于 0 时，我们只能知道 else 下的那条复合语句不会被执行，却不能确定执行完 printf(&quot;Zero is not allow. &quot;); 后一定会跳到 while ( i )，因为我们不知道循环体中整个 if else 结构后面是否还有其它语句。<br />　　2. break<br />break 可用于 C 提供的全部三种循环结构，其作用是跳出循环。如果 break 位于循环嵌套中的一个内循环，则仅跳出该内循环。上例中，如果 i 等于 0 的话，肯定会退出外循环，所以其实上例中的外循环使用 break 更加合适。下面我们来看一个例子：<br />&#47;* 本段代码仅用作演示目的，不要写这样的代码！*&#47;<br />int i, j, total;<br />while ( 1 )<br />{<br />scanf(&quot;%d&quot;, &i);<br />if ( i == 100 )<br />{<br />printf(&quot;100 is not allow. &quot;);<br />break;<br />}<br />for ( j = 0, total = 0; j != i; ++j )<br />{<br />if ( (total += j) &gt; 100 )<br />{<br />printf(&quot;greater than 100 is not allow. &quot;);<br />break;<br />}<br />&#47;* 其它语句 *&#47;<br />}<br />&#47;* 其它语句 *&#47;<br />}<br />&#47;* 其它语句 *&#47;<br />当 i 等于 100 时，外循环中的 break; 会被执行，从而跳出 while 循环，转而继续执行 while 循环后的语句。如果 i 等于 50，则能进入 for 循环。for 循环中，当 (total += j) &gt; 100 为真时，break; 会被执行，跳出 for 循环，转而继续执行 for 循环后的语句。如下图所示：<br />　　和 continue 一样，break 也是为了简化代码而生的！上面这段代码完全是为了演示 break 而瞎编的，导致代码复杂化了，请试着将其简化。
http://zhidao.baidu.com/question/111846721.html?qbl=relate_question_0
http://zhidao.baidu.com/question/189909996.html?qbl=relate_question_1
http://zhidao.baidu.com/question/365837551.html?qbl=relate_question_2
http://zhidao.baidu.com/question/1883064153827421868.html?qbl=relate_question_3
http://zhidao.baidu.com/question/272154690.html?qbl=relate_question_4
