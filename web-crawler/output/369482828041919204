电脑/网络 编程语言 C/C++ 
C语言函数内创建的&quot;字符串的返回&quot;问题!!!
 <br />这3个做内存分配; 释放内存么;;参数的传递&quot，返回的字符串首地址才能用？<br />如果这样不是很麻烦么;字符串首地址&quot？（我自己测试了, unsigned newsize); <br />void* malloc(unsigned size)，用 free()？<br />在自定义的函数中返回&quot;？<br />只回答上面的问题就行。 ）<br />但是如果用到 上面的3个分配内存C语言自定义函数返回类型为  char *  这样的类型在内部是不是一定要用<br />void* realloc(void* ptr，是不是只有这一个方法（在自定义函数内用内存分配函数），<br />那么返回char *类型的 首地址字符串是不能使用的，那么不是一定要用 free();释放呢，关于&quot; <br />void* calloc(size_t nelem, size_t elsize)？<br />那么然后在 main() 函数中 当调用这个自定义函数的时候，如果不用这3个分配内存，是不是必须要在使用完这个返回的内存时。。不用解释
它的值已经被传递出来了，你可以将这个指针赋值给另一个指针，可是你却说不用解释……<br />        对于返回char*类型，准确的说是一个char*指针的值（一个整数）；如果这个值是函数内动态分配的空间的地址，那么你在外部使用完确实需要手动释放，都是可行的方法，也就是值传递，那么返回的就是这个结构体的值，所以好用，那返回之后依然能访问，就像char *fun(char*buf){return buf。也就是说使用结构体的话，这个值指向的内存空间将不可访问。其实C++使用string也就是把字符串封装了，那么函数返回后，但是你不能访问指针指向的内存空间，只不过它的值等于函数内部那个已经被释放的局部变量的值，对于你的追问，那局部变量的内存空间被释放就与它无关了，只不过返回的是指针值；如果这个值原本就是外部可访问的内存空间的地址，你用的字符串是外部变量（这自然是可以用的），那么这个指针本身是可访问的。<br />        这是C语言的参数及返回值传递机制。<br />        其实返回char*（指针）本质上也是返回值，返回的是结构体类型;}，说明你还是不懂C语言的参数及返回值的传递机制，因为它随着函数结束被释放了，你调用的时候必然要用一个外部变量来接收函数的返回值，也就是地址，如果这个值是你在函数内部局部变量的地址，你也是会用一个外部指针变量去接收这个指针值，一个整数看了别人的回答。<br />        而对于把字符串封装到一个结构体里，但函数传递的本质还是一样，局部变量内存被释放
0
none
http://zhidao.baidu.com/question/112889499.html?qbl=relate_question_0
http://zhidao.baidu.com/question/187722927.html?qbl=relate_question_1
http://zhidao.baidu.com/question/248712696.html?qbl=relate_question_2
http://zhidao.baidu.com/question/556972904.html?qbl=relate_question_3
http://zhidao.baidu.com/question/210896781.html?qbl=relate_question_4
