电脑/网络 编程语言 C/C++ 
新手关于c语言点#define的问题
none
h&quot.<br />static int XXX_num = 0.c. 什么也没定义.c 里面如果出现了两次 #include &quot. 多半还是有 #endif..但是.., 相当于空字符串1., 具体内容和指令含义同编译器., system_include 看起来像是告诉编译器.,起标志作用的&quot.....: #include &quot, 你一个  x;b;宏语句&quot;<br />int XXX_f1 ( int.., 类型;<br />#include &quot, 你很难避免里面出现<br />#include &quot;a;.., int ).h;<br />;x, 考虑到 #include 的作用就是相当于把被引用的文件复制一份到 你的源文件中., 主要作用就是, 如果 &quot.编译程序就会报错, 但它可能是在头文件的最末端<br /><br />3, 我不知道你用什么环境..; 已经 build, 那么就把和它相关的某些内容包含在内...<br /><br />这些都是头文件里面的.;x, y.h 里面有一系列函数, 比如说 struct XXX { int x.;, 当然这个是我猜的;x.....h&quot.<br />这样如果你的任何一个源文件 x... #pragma 是编译器根据特定操作系统或者编译环境, 让编译器知道.h&quot.重复声明和定义问题<br /><br />当然你可以说;<br />而其中 a.h&quot, 操作系统密切相关; ;system&quot;..., 我会小心不出现两次 #include &quot, 所以要有一定的技巧避免重复引用<br /><br />比如说..c 里面有如下内容.h&quot.h 又引用了 x, 变量的声明;<br />而 x; }., stdio.h 这个头文件已经被引用了从而避免重复引用<br /><br />2, 用于精细控制编译过程的一系列
7
　　#define叫做预处理宏定义命令，它的具体作用，就是方便程序段的定义和修改，提高程序的运行效率。<br /><br />　　无参宏定义中，一般形式为：#define 标识符 字符串<br />　　其中的“#”表示这是一条预处理命令。凡是以“#”开头的均为预处理命令。“define”为宏定义命令。“标识符”为所定义的宏名。“字符串”可以是常数、表达式、格式串等。<br />　　#define M (a+b)　它的作用是指定标识符M来代替表达式(a+b)。在编写源程序时，所有的(a+b)都可由M代替，而对源程序作编译时，将先由预处理程序进行宏代换，即用(a+b)表达式去置换所有的宏名M，然后再进行编译。<br /><br />　　程序1：<br />　#include&lt;stdio.h&gt;<br />　　#define M (a+b)<br />　　int main(vido)<br />　　{<br />　　int s,a,b;<br />　　printf(&quot;inputnumbera&b:&quot;);<br />　　scanf(&quot;%d%d&quot;,&a,&b);<br />　　s = M*M;<br />　　printf(&quot;s=%d&#92;n&quot;,s);<br />　　}<br />　　对于宏定义还要说明以下几点：<br />　　1.宏定义是用宏名来表示一个字符串，在宏展开时又以该字符串取代宏名，这只是一种简单的代换，字符串中可以含任何字符，可以是常数，也可以是表达式，预处理程序对它不作任何检查。如有错误，只能在编译已被宏展开后的源程序时发现。<br />　　2.宏定义不是说明或语句，在行末不必加分号，如加上分号则连分号也一起置换。<br />　　3.宏定义其作用域为宏定义命令起到源程序结束。如要终止其作用域可使用#undef命令。 　（有关#undef 请查阅其他资料）<br /><br />　　宏定义优点：<br />　　(1) 方便程序的修改<br />　　使用简单宏定义可用宏代替一个在程序中经常使用的常量，这样在将该常量改变时，不用对整个程序进行修改，只修改宏定义的字符串即可，而且当常量比较长时， 我们可以用较短的有意义的标识符来写程序，这样更方便一些。我们所说的常量改变不是在程序运行期间改变，而是在编程期间的修改，举一个大家比较熟悉的例 子，圆周率π是在数学上常用的一个值，有时我们会用3.14来表示，有时也会用3.1415926等，这要看计算所需要的精度，如果我们编制的一个程序中 要多次使用它，那么需要确定一个数值，在本次运行中不改变，但也许后来发现程序所表现的精度有变化，需要改变它的值， 这就需要修改程序中所有的相关数值，这会给我们带来一定的不便，但如果使用宏定义，使用一个标识符来代替，则在修改时只修改宏定义即可，还可以减少输入 3.1415926这样长的数值多次的情况，我们可以如此定义 #define pi 3.1415926，既减少了输入又便于修改，何乐而不为呢？<br />　　(2) 提高程序的运行效率<br />　　使用带参数的宏定义可完成函数调用的功能，又能减少系统开销，提高运行效率。正如C语言中所讲，函数的使用可以使程序更加模块化，便于组织，而且可重复利用，但在发生函数调用时，需要保留调用函数的现场，以便子函数执行结束后能返回继续执行，同样在子函数执行完后要恢复调用函数的现场，这都需要一定的时间，如果子函数执行的操作比较多，这种转换时间开销可以忽略，但如果子函数完成的功能比较少，甚至于只完成一点操作，如一个乘法语句的操作，则这部分转换开销就相对较大了，但使用带参数的宏定义就不会出现这个问 题，因为它是在预处理阶段即进行了宏展开，在执行时不需要转换，即在当地执行。宏定义可完成简单的操作，但复杂的操作还是要由函数调用来完成，而且宏定义所占用的目标代码空间相对较大。所以在使用时要依据具体情况来决定是否使用宏定义。
http://zhidao.baidu.com/question/49906649.html?qbl=relate_question_0
http://zhidao.baidu.com/question/40094748.html?qbl=relate_question_1
http://zhidao.baidu.com/question/50517505.html?qbl=relate_question_2
http://zhidao.baidu.com/question/210647793.html?qbl=relate_question_3
http://zhidao.baidu.com/question/42586262.html?qbl=relate_question_4
