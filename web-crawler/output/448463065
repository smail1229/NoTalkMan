电脑/网络 编程语言 C/C++ 
求给C语言程序加注释
);),int *m1,int p,int r,3}},2}},int *m1;&#92;); j++)<br />  {<br />   t=0,int p; j++)<br />   *(m+i*c+j) = *(m1+i*c+j) - *(m2+i*c+j),4,4),-8};nF(3x3)=A*C：&#92,j,{7;nA(3x4);<br />  printf(&quot;<br />void disp(int *m;<br /> sub(e[0];<br /> disp(a[0]; i&lt,{2,int *m1,4),int *m2,int c);n&quot,int *m2; i&lt,3,a[0],4);&#92，给加个大概注释;<br /> for(i=0,int *m2;);<br />   *(m+i*c+j)=t;<br />}<br />void sub(int *m;p;<br /> int b[3][4]={{2;<br /> printf(&quot; i&lt; i&lt,3,5;&#92,3);n&quot,1;<br />}<br />void mult(int *m;<br /> disp(e[0]：&#92;r;r：&#92,b[0],int *m2;%6d&quot,1},4,3},int r;&#92;&#92,3,int r,-4,int *m2,4},3),5,j,3);c：&#92,*(m+i*c+j));),3;<br /> int d[3][4]={0};),int r;),2},int *m1：&#92;stdio,1,a[0],4),{4; j&lt;<br /> printf(&quot;r,c[0];c,2，第一; j&lt; k++)<br />    t += *(m1+i*p+k) * *(m2+k*c+j);<br />  }<br />}<br />void disp(int *m,7,4;&#92,2};<br />void sub(int *m;<br /> disp(f[0],b[0],4)：&#92,3;,int c)<br />{<br /> int i;r,4,4); j++)<br />   *(m+i*c+j) = *(m1+i*c+j) + *(m2+i*c+j);<br /> for(i=0; i++)<br />  for(j=0;&#92,3。第二个重点解释下<br />*(m+i*c+j) = *(m1+i*c+j) + *(m2+i*c+j);<br /> disp(d[0];nA(3x4)：&#92,-3,int *m1; k&lt;nC(4x3);<br />   for(k=0;<br /> disp(b[0],t,j,3;<br /> printf(&quot;<br /> int c[4][3]={{5,j,int r,{7;<br /> disp(c[0]; i++)<br />  for(j=0; i++)<br /> {<br />  for(j=0;c,4,int c){<br /> int i;<br /> printf(&quot,int c),{5;<br /> printf(&quot,-7},6,a[0]; i++)<br />  for(j=0;<br /> for(i=0;nB(3x4);<br /> int f[3][3]={0},{4,int c){<br /> int i,int r; j&lt,7,3;n&quot;&#92两个问题;n&quot;nE(3x4)=A-B,4;);c,k;<br />void main()<br />{<br /> int a[3][4]={{4;<br /> printf(&quot;<br />   *(m+i*c+j)=t,int r;<br /> mult(f[0];<br /> printf(&quot,int c){<br /> int i,int r;<br /> add(d[0];n&quot,2}};<br />}<br />void add(int *m,4);<br /><br />#include&lt;n&quot; j++)<br />   printf(&quot;<br /> for(i=0;n&quot;<br />void mult(int *m,3,int *m2;nD(3x4)=A+B; j&lt;<br /> int e[3][4]={0}.h&gt,int *m1,3,int c),int c);<br />void add(int *m;n&quot,3,{1;<br /> disp(a[0];<br /> t += *(m1+i*p+k) * *(m2+k*c+j)
3;/nD(3x4)=A+B,{4;c; i&lt; i&lt;显示a+b的结果(即d中的数据)<br /> sub(e[0];  /矩阵乘法<br />void disp(int *m;<br /> int d[3][4]={0};),3,3;n&quot，则 *(m+i*c+j) 就表示矩阵C的第i行第j列的数据<br />这里是用指针实现的;n&quot;nC(4x3);<br /> printf(&quot;显示矩阵a<br /> printf(&quot;<br />void add(int *m;&#92;显示a*c的结果(即f中的数据)<br />}<br />&#47：&#92;);<br /> int e[3][4]={0};<br />{<br /> int i; &#47,int *m1,a[0],t;<br /> disp(b[0];&#47,-8};r;nA(3x4),a[0];&#47,7,3;n&quot;&#92;<br /> int b[3][4]={{2;显示a-b的结果(即e中的数据)<br /> printf(&quot：&#92,并将结果存到d中<br /> printf(&quot;打印数组数据（矩阵里的数据）<br />&#47,k: m+i*c+j  这个表示指向矩阵C的第i行第j列的数据的指针; &#47,int c) &#47,int r;<br />void mult(int *m,int *m2;<br />}<br />/ &#47,4;标准输入输出库所在的头文件<br />/两个矩阵之间的减法运算<br />{<br /> int i;n&quot,{7;&#47,3，<br />&#47，可自行对照矩阵乘法运算公式<br />如矩阵c = a * b<br />for(k=0;n&quot;n&quot;/n&quot;/%6d&quot,int c); 显示矩阵a<br /> printf(&quot; / j&lt;两个矩阵之间的乘法运算<br />{<br /> int i,j;<br /> disp(f[0];<br /> disp(a[0];/ j++)<br />   printf(&quot,int c)&#47,4),3);&#47,int p,5; k++)<br />    t += *(m1+i*p+k) * *(m2+k*c+j); /<br />  printf(&quot,int r;),2},4),{4，m2为矩形B的首地址<br />*****      r 为矩阵的行数;<br /> for(i=0;显示矩阵b<br /> add(d[0]; &#47,7; j&lt，则 *(m2+i*c+j) 就表示矩阵B的第i行第j列的数据<br />*(m+i*c+j)   ;nE(3x4)=A-B,3);主测试函数<br />void main()<br />{<br /> int a[3][4]={{4;&#47,int *m1; /&#47,2};并将p (k的值从0到p) 次结果进行累加<br />   *(m+i*c+j)=t;<br />}<br />&#47,int *m1,4; 计算矩阵 a + b;/ i++)<br />  for(j=0;/r;/ / i++)<br />  for(j=0;/<br /> for(i=0;<br />   for(k=0,a[0],int c),*(m+i*c+j)); &#47,int p,2,6,3;/ k++)<br />t += *(m1+i*p+k) * *(m2+k*c+j); j++)<br />   *(m+i*c+j) = *(m1+i*c+j) - *(m2+i*c+j);&#47,j: m 指向运算结果存放的二维数组(即矩阵) C的首地址<br />*****      m1为矩形A的首地址,{7; / /&#47,3：&#92; i++)<br />  for(j=0;p,2}}：两个矩阵进行加法运算 C = A+B<br />*****参数,int r;&#92;&#47,3;<br /> for(i=0;显示矩阵c<br /> mult(f[0];);函数定义<br />&#47,int *m2：m1+i*c+j  这个表示指向矩阵A的第i行第j列的数据的指针;n&quot; i&lt,4};&#92,{5,int r;/ j++)<br />   *(m+i*c+j) = *(m1+i*c+j) + *(m2+i*c+j),int c),5;矩阵加法<br />void sub(int *m,3}},int *m1;c,1};);* <br />*****函数功能;<br />   *(m+i*c+j)=t,{2,1;   <br /> */ i&lt,4,int r;<br /> for(i=0,int r;<br />等价于<br /> c[i][j] = a[i][j] + b[i][j];最后将这个累加的结果赋值给矩阵c的第i行第j列的数据<br />*/;c;显示打印矩阵中的数据<br />void disp(int *m;)，则 *(m1+i*c+j) 就表示矩阵A的第i行第j列的数据<br />*(m2+i*c+j)  ：&#92,3;自定义函数声明<br />void add(int *m;)，因为矩阵乘法运算公式较为复杂一些; &#47,4),b[0];nF(3x3)=A*C;计算矩阵a*c 并将结果存到f中<br /> printf(&quot,{1;/&#92;矩阵减法<br />void mult(int *m; i++)<br /> {<br />  for(j=0,4;&#47,int c),3;&#47,3;<br /> int f[3][3]={0};<br /> disp(e[0],c[0],4); /&#47,int *m2;&#47：&#92;r;&#92;nB(3x4),4);nA(3x4),2}},int *m2：&#92,4),4); 计算矩阵 a - b;/),并将结果存到e中<br /> printf(&quot,j; j++)<br />  {<br />   t=0;<br /> disp(d[0];注释与上边加法类似<br />void sub(int *m;&#92：m2+i*c+j  这个表示指向矩阵B的第i行第j列的数据的指针; j&lt;<br /> int c[4][3]={{5,j,-3,4,int *m2;&#47：&#92,int *m1,int r,4,int *m2,int c)<br />{<br /> int i;c;/ k&lt;r; j&lt;*注释与上边类似,int *m1,-4;&#47,3);&#92,1;<br />  }<br />}<br />&#47,3};这个表示将矩阵A的第i行j列的数据 与 矩阵B的第i行j列的数据 相加<br />     然后将结果赋值给矩阵C的第i行j列数据<br />*(m1+i*c+j)  ;p; k&lt;<br /> disp(a[0],b[0],-7},int r;表示将m1的第i行k列的数据 与 m2的第k行j列的数据相乘 ;stdio， c为矩阵的列数<br />*(m+i*c+j) = *(m1+i*c+j) + *(m2+i*c+j),int c) &#47， <br />   *(m+i*c+j) = *(m1+i*c+j) + *(m2+i*c+j).h&gt;<br /> disp(c[0]; &#47#include&lt
6
none
http://zhidao.baidu.com/question/152620450.html?qbl=relate_question_0
http://zhidao.baidu.com/question/353195849.html?qbl=relate_question_1
http://zhidao.baidu.com/question/87308368.html?qbl=relate_question_2
http://zhidao.baidu.com/question/560316171.html?qbl=relate_question_3
http://zhidao.baidu.com/question/506116387.html?qbl=relate_question_4
