电脑/网络 编程语言 C/C++ 
关于C语言动态数组
语句，4，1。<br />我想要的效果是 运行--&gt，5，2，要求前提是N是提前输入的，3&#92;n然后就自动排序，输入任意个整数，就先输入“10”接下来才能挨个输入十个整数 进行排序，想自己用数组做一个冒泡排序。<br />排序倒无所谓，拜托大家受累帮忙写一个完整的代码。自己出的题目是这样的？<br />现在的问题是如何监听输入结束。从网上找了些动态数组的东西，但是输入任意整数把我难住了，因为小弟我刚开始学C。都是用<br />a = (int *) malloc(N * sizeof(int))！受累了各位;输入1，对其排序，应该怎么做，和如何获得数组中的元素个数，对于链表还是不怎么会用……<br /><br />求完整实现代码。就是比如我要输入10个整数刚学C不久，3？<br /><br />如果用链表
 <br />following=NULL; *previous; <br />return p-&gt; <br />} <br />template&lt; <br />Linlist&lt; <br />bool Linlistfull();*Setposition(int position); <br />} <br />template&lt; *Linlist&lt; <br />newnode=new Node&lt;个&#92;;&lt;Linlist_entry&gt;Linlist_entry&gt; <br />} <br /><br />cout&lt:&quot;stdlib; <br />head=new Node&lt;&lt:;*ptrnext) <br />{ <br />data=entry; *head: Setposition(int position) <br />{ <br />if(position&lt;共&quot;&quot,Linlist_entry&x) <br />{ <br />Node&lt;range error;class Linlist_entry&gt;endl; &quot; <br />delete head;&lt:&quot,Linlist_entry&x);mylinlist;i++) <br />cout&lt; <br />} <br />template&lt;class Linlist_entry&gt;Linlist_entry&gt.h&gt;*next;Linlist_entry&gt;Linlist_entry&gt; <br />i++; <br /><br />} <br />void main() <br />{ <br />Linlist&lt: <br />Linlist();Linlist_entry&gt; <br />cout&lt;count&lt;} <br />template&lt;Linlist_entry&gt采纳我吧; <br />bool Linlistempty(); <br />} <br />template&lt; <br />} <br />template&lt; <br />const int maxsize=100;;/range error;/ &quot; <br />} <br />Linlist_entry a=currunt-&gt;next=currunt-&gt;endl; <br />Node&lt;;&quot;i&lt;&lt; <br />} <br />/ <br />~Linlist();Linlist_entry&gt;/class Linlist_entry&gt:;Linlist_entry&gt;; <br />void Linlistclear(); <br />class Node <br />{ <br />friend class Linlist&lt; <br />} <br />previous=Setposition(position-1);; <br /><br />};class Linlist_entry&gt;Linlist_entry&gt;; <br />int i=0;template&lt;0||position&gt;class Linlist_entry&gt; data=entry;&quot;error; *previous; <br />if(currunt==NULL) <br />{ <br />cout&lt;&lt; <br />} <br /><br />template&lt;&lt;; <br />mylinlist; <br />delete currunt;value; <br />next=ptrnext; <br />} <br />template&lt;&lt;-1||position&gt; <br />return x; <br />Node&lt; <br />Node(Node&lt; <br />class Linlist <br />{ <br />private;(x);count) <br />{ <br />cout&lt;&lt;&#47: <br />Linlist_entry data;;Linlist_entry&gt; <br />head=NULL; <br />for(i=0; <br />Node(Linlist_entry nentry;next=following;&quot;next;count-1) <br />{ <br />cout&lt;;&quot;&lt;&lt; <br />cin&gt;&lt;count) <br />{ <br />/iostream;;Linlist_entry&gt; <br />exit(1);Linlist_entry&gt:Delete(int position) <br />{ <br />Node&lt，给你费了好大劲啊;&quot;class Linlist_entry&gt,*newnode:Insert(int position; <br />Linlist&lt; <br />previous-&gt;*ptrnext=NULL);class Linlist_entry&gt.h&gt;position&lt:; <br />} <br />template&lt;Linlist_entry&gt; <br />} <br />template&lt::Node(Linlist_entry entry) <br />/ <br />if(position&lt; <br />template&lt; <br />} <br />else <br />{ <br />previous-&gt; <br />public:Linlistfull() <br />{ <br />return(count=maxsize);&lt;&lt;Node&lt; <br />bool Linlist&lt;&quot; <br />cout&lt; <br />int count;&lt;*ptrnext=NULL); <br />previous=Setposition(position-1):Linlistempty() <br />{ <br />return(count&gt,Node&lt;Linlist_entry&gt:Size() <br />{ <br />return count; <br />newnode-&gt;Linlist_entry&gt;class Linlist_entry&gt;Linlist_entry&gt;i&lt;&lt;&lt:Node(Node&lt;endl;&lt;Linlist_entry&gt.Getdata(i)&lt:; <br />template&lt:~Linlist() <br />{ <br />Linlistclear();class Linlist_entry&gt;&lt;Linlist_entry&gt.Size(): <br />Linlist_entry entry[maxsize]: <br />/ <br />following=previous-&gt;;/&quot:;0);&lt;;&quot; *currptr; <br />} <br /><br />count++:,Node&lt;string; <br />Node&lt;;count; <br />} <br />if(position==-1) return head;mylinlist;n分别为; <br />Node&lt:; <br />Linlist_entry Delete(int position);&lt;next=NULL;&lt;class Linlist_entry&gt;&lt; <br />exit(1); <br />int Linlist&lt;; <br />/class Linlist_entry&gt;i&lt; <br />while(1) <br />{ <br />int value; <br />count=0;class Linlist_entry&gt;{ <br />&#47,*following;next; <br />#include&lt; <br />Linlist_entry Getdata(int position); <br />if(position&lt;&#47.Size()&lt; <br />} <br />template&lt; <br />} <br />template&lt; <br />if(position==count) <br />{ <br />previous-&gt;&lt;Linlist_entry&gt;&lt;&lt;/endl!range error&quot:;&quot; <br />public; <br />#include&lt;(); <br />Node&lt;data!=NULL&&i&lt;Linlist_entry&gt;next! point is NULL&quot; <br />Linlist_entry Linlist&lt; <br />exit(1); <br />}; <br />void Linlist&lt; *p=Setposition(position);next=newnode;next:;&lt:; <br />i++,value);Linlist_entry&gt; <br />int Size();int&gt;Linlist_entry&gt; <br />bool Linlist&lt;Linlist_entry&gt; *p=head-&gt;Linlist_entry&gt; <br />} <br />return p!&quot; <br />Node&lt; <br />Linlist_entry Linlist&lt!&quot;mylinlist; <br />if(value == -1) <br />break; <br />exit(1):Getdata(int position) <br />{ <br />Node&lt;Linlist_entry&gt;; <br />Linlist_entry Insert(int position; <br />newnode-&gt; <br />return a; <br />cout&lt; <br /><br />protected.h&gt; Node(Linlist_entry entry);&gt;Linlist_entry&gt;个(-1退出);endl:Linlist() <br />{ <br />count=0;class Linlist_entry&gt;;class Linlist:：<br /><br />#include&lt;Linlist_entry&gt;&lt:; &quot:Node(Linlist_entry entry;class Linlist_entry&gt;endl;&lt; <br />while(p;输入第&quot; <br />template&lt; <br />Linlist_entry Linlist&lt;Linlist_entry&gt;&lt; <br />Node&lt;position) <br />{ <br />p=p-&gt; <br />/ cout&lt;&lt; mylinlist; <br />count--:Linlistclear() <br />{ <br />for(int i=0;&lt;class Linlist_entry&gt,*currunt; cout&lt.Insert(i;请输入&quot; <br />/&quot;/&quot;next=newnode;*ptrnext) <br />{ <br />next=ptrnext; <br />int i=0;position&lt;&lt;i++) <br />entry[i]=NULL;&lt; <br />currptr=NULL;data; <br />Node&lt; <br />currunt=previous-&gt;&lt;;0||position&gt;next;endl;;class Linlist_entry&gt
29
none
http://zhidao.baidu.com/question/91608408.html?qbl=relate_question_0
http://zhidao.baidu.com/question/93653949.html?qbl=relate_question_1
http://zhidao.baidu.com/question/152822398.html?qbl=relate_question_2
http://zhidao.baidu.com/question/176377248.html?qbl=relate_question_3
